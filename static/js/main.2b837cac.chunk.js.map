{"version":3,"sources":["assests/weather.png","Components/Common/Navbar.js","Components/Common/Card.js","Components/Common/RectangleCard.js","Components/Home.js","Components/Common/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","class","href","Component","useStyles","makeStyles","root","width","margin","fullroot","alignSelf","textAlign","alignItems","bullet","display","transform","title","fontSize","pos","marginBottom","SimpleCard","props","classes","Card","className","style","CardContent","Typography","color","gutterBottom","Header","variant","component","temperature","location","Mintemp","Maxtemp","minWidth","Grid","container","spacing","direction","justify","item","xs","Math","abs","temp","toFixed","maxTemp","minTemp","API_KEY","Home","getWeather","e","a","fetch","state","userInputState","userInputCountry","api_url","json","data","cod","alert","window","reload","setState","main","city","name","max","temp_max","min","temp_min","error","visible","undefined","countries","home_temperature","home_location","country","home_max_temp","home_min_temp","onCountryChange","bind","value","this","sortname","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","location_url","csc","getAllCountries","src","Weather","responsive","Autocomplete","id","options","getOptionLabel","option","defaultValue","onChange","renderInput","params","TextField","errorMessage","errorText","password_error_text","label","helperText","target","Button","onClick","Footer","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2b837cac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/weather.2bdb0d8d.png\";","import React, { Component } from \"react\";\r\nimport GrainIcon from \"@material-ui/icons/Grain\";\r\n\r\nexport default class Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav class=\"navbar navbar-expand-lg navbar-light \">\r\n        <a class=\"navbar-brand text-light\" href=\"#\">\r\n          <GrainIcon /> Weather App\r\n        </a>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"52vh\",\r\n    margin: 5,\r\n  },\r\n  fullroot: {\r\n    width: \"52vh\",\r\n    alignSelf: \"center\",\r\n    margin: 5,\r\n    textAlign: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nexport default function SimpleCard(props) {\r\n  const classes = useStyles();\r\n  \r\n\r\n  return (\r\n    <Card className={!props.style ? classes.root : classes.fullroot}>\r\n      <CardContent>\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"textSecondary\"\r\n          gutterBottom\r\n        >\r\n          {props.Header}\r\n        </Typography>\r\n        <Typography variant=\"h2\" component=\"h2\">\r\n          {props.temperature} °C\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          {props.location}\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          Min. Temperature: {props.Mintemp}°C\r\n          <br />\r\n          Max. Temperature : {props.Maxtemp}°C\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    margin: 10,\r\n    minWidth: 20,\r\n  },\r\n\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n    textAlign:\"center\",\r\n  },\r\n  pos: {\r\n    marginBottom: 14,\r\n  },\r\n});\r\n\r\nexport default function SimpleCard(props) {\r\n  const classes = useStyles();\r\n  const bull = <span className={classes.bullet}>•</span>;\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={0}\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      justify=\"center\"\r\n    >\r\n      <Grid item xs={6}>\r\n        <Card className={classes.root}>\r\n          <CardContent>\r\n            <Typography className={classes.title} gutterBottom>\r\n              <b> Temperature difference</b>\r\n            </Typography>\r\n            <Typography\r\n              className={classes.title}\r\n              color=\"textSecondary\"\r\n              gutterBottom\r\n            >\r\n              Temperature difference: {Math.abs(props.temp).toFixed(2)}°C\r\n            </Typography>\r\n            <Typography\r\n              className={classes.title}\r\n              color=\"textSecondary\"\r\n              gutterBottom\r\n            >\r\n              Max. Temperature difference: {Math.abs(props.maxTemp).toFixed(2)}°C\r\n            </Typography>\r\n            <Typography\r\n              className={classes.title}\r\n              color=\"textSecondary\"\r\n              gutterBottom\r\n            >\r\n              Min. Temperature difference: {Math.abs(props.minTemp).toFixed(2)}°C\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Weather from \"../assests/weather.png\";\r\nimport Card from \"./Common/Card\";\r\nimport csc from \"country-state-city\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport RectangleCard from \"./Common/RectangleCard\";\r\n\r\nconst API_KEY = \"9a4882ca3e24e11503016cf96e62d615\"; //APIKEY\r\n\r\nexport default class Home extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      countries: [],\r\n      state: [],\r\n      userInputCountry: \"\",\r\n      userInputState: \"\",\r\n      error: false,\r\n      visible: false,\r\n      home_temperature: \"\",\r\n      temperature: \"\",\r\n      city: \"\",\r\n      home_location: \"\",\r\n      country: \"\",\r\n      home_max_temp: \"\",\r\n      max: \"\",\r\n      home_min_temp: \"\",\r\n      min: \"\",\r\n    };\r\n    this.onCountryChange = this.onCountryChange.bind(this);\r\n  }\r\n\r\n  // conversion of countryname to country code\r\n  onCountryChange(e, value) {\r\n    if (value) {\r\n      this.setState({\r\n        userInputCountry: value.sortname,\r\n      });\r\n    }\r\n  }\r\n\r\n  //*****************************************User entered location function*********************************************************\r\n  getWeather = async (e) => {\r\n    const api_url = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${this.state.userInputState},${this.state.userInputCountry}&appid=${API_KEY}&units=metric`\r\n    );\r\n\r\n    const data = await api_url.json();\r\n    //API error handling\r\n    if (data.cod == \"404\") {\r\n      alert(\"Enter valid data\");\r\n      window.location.reload(false);\r\n    }\r\n\r\n    //setting state values from APIDATA only if the entered values are true\r\n    if (this.state.userInputState && this.state.userInputCountry) {\r\n      this.setState({\r\n        temperature: data.main.temp,\r\n        city: data.name,\r\n        max: data.main.temp_max,\r\n        min: data.main.temp_min,\r\n        error: false,\r\n        visible: true,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        temperature: undefined,\r\n        city: undefined,\r\n        max: undefined,\r\n        error: true,\r\n        min: undefined,\r\n      });\r\n    }\r\n  };\r\n\r\n  // *************************function to fetch current location details ***************************************\r\n  componentDidMount() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(async (position) => {\r\n        const location_url = await fetch(\r\n          `https://api.openweathermap.org/data/2.5/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&appid=${API_KEY}&units=metric`\r\n        );\r\n        const data = await location_url.json();\r\n\r\n        if (data) {\r\n          // setting state values from APIdata\r\n          this.setState({\r\n            home_temperature: data.main.temp,\r\n            home_location: data.name,\r\n            home_max_temp: data.main.temp_max,\r\n            home_min_temp: data.main.temp_min,\r\n            countries: csc.getAllCountries(),\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      alert(\"Sorry, you browser doesn't support this feature.\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"jumbotron bg-level1\">\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-6 text-center\">\r\n            <img className=\"WeatherGirl\" src={Weather} responsive />\r\n          </div>\r\n\r\n          <div className=\"col-lg-6 \">\r\n            <div class=\"row \">\r\n              <div class=\"col-lg-4 d-flex justify-content-center\">\r\n                {\" \"}\r\n                {/******************************* UserInput Textform (Country) ************************************************/}\r\n                <Autocomplete\r\n                  id=\"standard-basic\"\r\n                  options={this.state.countries}\r\n                  getOptionLabel={(option) => option.name}\r\n                  style={{ width: 200, textAlign: \"center\" }}\r\n                  defaultValue={this.state.userInputCountry}\r\n                  onChange={this.onCountryChange}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      id=\"standard-select\"\r\n                      error\r\n                      id=\"standard-error\"\r\n                      label=\"Country\"\r\n                      error={this.state.error}\r\n                      helperText={this.state.errorMessage}\r\n                    />\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              {/******************************* UserInput Textform (City) ************************************************/}\r\n\r\n              <div class=\"col-lg-4 d-flex justify-content-center\">\r\n                {\" \"}\r\n                <TextField\r\n                  style={{ width: 200, textAlign: \"center\" }}\r\n                  id=\"standard-basic\"\r\n                  errorText={this.state.password_error_text}\r\n                  label=\"City\"\r\n                  error={this.state.error}\r\n                  helperText={this.state.errorMessage}\r\n                  onChange={(e, value) => {\r\n                    this.setState({\r\n                      userInputState: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </div>\r\n              <div class=\"col-lg-4 p-4 d-flex justify-content-center\">\r\n                {\" \"}\r\n                <Button onClick={() => this.getWeather()} variant=\"contained\">\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <div class=\"row mt-1 \">\r\n              <div\r\n                class={\r\n                  !this.state.visible\r\n                    ? \"col-lg-12 d-flex justify-content-center text-center \"\r\n                    : \"col-lg-6 d-flex justify-content-center text-center \"\r\n                }\r\n              >\r\n                {/************ Current location weather - passing state values to card component  **********************************************************************/}\r\n                <Card\r\n                  style={!this.state.visible}\r\n                  Header={\"Weather in your current Location\"}\r\n                  temperature={this.state.home_temperature}\r\n                  location={this.state.home_location}\r\n                  Mintemp={this.state.home_min_temp}\r\n                  Maxtemp={this.state.home_max_temp}\r\n                />\r\n              </div>\r\n\r\n              {/**************** User input location - passing state values to card component)************************************************************/}\r\n              {this.state.visible ? (\r\n                <div class=\"col-lg-6 d-flex justify-content-center  text-center\">\r\n                  <Card\r\n                    Header={this.state.userInputCountry}\r\n                    temperature={this.state.temperature}\r\n                    location={this.state.userInputState}\r\n                    Mintemp={this.state.min}\r\n                    Maxtemp={this.state.max}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <div></div>\r\n              )}\r\n              {/*************  difference between the current weather and the user entered city's weather (passing values to \"RectangleCard component\") ****************/}\r\n              {this.state.visible ? (\r\n                <RectangleCard\r\n                  temp={this.state.home_temperature - this.state.temperature}\r\n                  maxTemp={this.state.home_max_temp - this.state.max}\r\n                  minTemp={this.state.home_min_temp - this.state.min}\r\n                />\r\n              ) : (\r\n                <div></div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Footer extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <footer class=\"page-footer font-small bg-brand1\">\r\n          <div class=\"footer-copyright text-center py-3\">\r\n            © 2020 Copyright: Weather App\r\n          </div>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport Navbar from \"./Components/Common/Navbar\";\r\nimport Home from \"./Components/Home\";\r\nimport Footer from \"./Components/Common/Footer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"bg-level1\">\r\n      <Navbar />\r\n      <Home />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}